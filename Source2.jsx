$.runScript = {	alert: function() {	//--------------------------------------------------------------------------------------------------------------------------------------------------proj = app.project;var csvFile = File.openDialog ("Target CSV File","*.csv"); // PROMPT FOR CSV FILEvar csvFile = csvFile.fsName; // FORMAT CSV FILEPATH TO BE FRIENDLY  var infoArray; //array containg all the infos in the csv file  // Following opens the text file and stores it in var CSVFILE. Then splits it by every new line, and COMA into a multi-tiered array, INFOARRAY.if(csvFile){        var file = File(csvFile) //OPEN, READ, AND CLOSE THE CSV FILE    file.open("r");    var fullText = file.read();    file.close();    infoArray = fullText.split("\n"); // SPLIT THE CSV FILE AT EVERY NEW LINE            for(var a=0;a<infoArray.length;a++){ // LOOP THROUGH EACH LINE, SPLIT THE LINE AT EVERY COMMA            infoArray[a] = infoArray[a].split(",");              }}if(infoArray[infoArray.length -1] == ""){ //SOMETIMES WHEN SPLITTING UP THE ARRAY, THE PROCESS CREATES AN EXTRA, EMPTY LINE. tHIS WILL JUST TEST AND REMOVE THAT IF IT HAPPENS    infoArray.splice(infoArray.length-1, 1);    }var nameArray = [];app.project.createNewSequence(infoArray[0][0], ""); // PROMPT TO CREATE A NEW SEQUENCE//~ alert(export_low_bin.children.numItems);var stringa_debug = "";var activeSeq = proj.activeSequence;var preRoll = 5; //length of preroll video in secondsvar previewPrerollTime = 1;var previewScale = 39;var previewXVal = 0.8046875;var previewYVal = 0.7194444;//DEFINE THE EXERCISE BINvar  exercisesBin = findBinIndex(proj.rootItem, "05_EXERCISES_edited");//DEFINE THE EXERCISE INTROS (PREROLL) BIN --- BLURREDvar  exercisesIntrosBin = findBinIndex(proj.rootItem, "05_EXERCISES-BLURRED");//DEFINE THE BREAK CLIPvar  breakBin = findBinIndex(proj.rootItem, "BREAK");var breakClip = breakBin.children[0]; //only clip in Break Bin//DEFINE THE BREAK CLIPvar  breakTimersBin = findBinIndex(proj.rootItem, "titles_TIMERS");//DEFINE THE NEXT CLIPvar  nextBin = findBinIndex(proj.rootItem, "NEXT");var nextClip = nextBin.children[0]; //only clip in next Bin//DEFINE THE AUDIO TIMER CLIPvar  audioTimerBin = findBinIndex(proj.rootItem, "AUDIO TIMER");var audioTimerClip = audioTimerBin.children[0]; //only clip in next Bin//DEFINE BREAK TITLEvar  breakTitleBin = findBinIndex(proj.rootItem, "Titles_BREAK");var breakTitleClip = breakTitleBin.children[0]; //only clip in Break Bin//DEFINE THE EXERCISE TITLE BINvar  exercisesTitlesBin = findBinIndex(proj.rootItem, "Titles_EXERCISES");var  timerExercisesBin = findBinIndex(proj.rootItem, "Titles_TIME");for (var j=1; j< infoArray.length; j++){  //loop over the whole exercise script    for (var i = 0; i < exercisesBin.children.numItems; i++){ //loop over the exercise bin        var clip = exercisesBin.children[i];        var reString = "^" + infoArray[j][0];        var reEx = new RegExp(reString);                        if (clip.name.toString().match(reEx)) {                         //VIDEO PREVIEW during the preciding break --- add thepreview of the exercise to the previeous break            if (j>1 && Number(infoArray[j-1][2])>0){ //checkig if we are at least at the second clip and if the previous break was longer than 0 seconds                var previewClip = clip;                var numClips = activeSeq.videoTracks[0].clips.numItems;                var insertTime = activeSeq.videoTracks[0].clips[numClips - 1].start.seconds + previewPrerollTime;                                var previewLength = Number(infoArray[j-1][2])-previewPrerollTime + 1; //                previewClip.setOutPoint(previewLength);                activeSeq.videoTracks[5].insertClip(previewClip,insertTime);                                //set the size                var numPreviewClips = activeSeq.videoTracks[5].clips.numItems;                var prevClipEffects = proj.activeSequence.videoTracks[5].clips[numPreviewClips-1].components;                prevClipEffects[1].properties[0].setValue([ previewXVal, previewYVal],true);                prevClipEffects[1].properties[1].setValue(previewScale,true);                                //add the NEXT title                nextClip.setOutPoint(previewLength);                activeSeq.videoTracks[6].insertClip(nextClip,insertTime);                }                            //VIDEO: preroll intro (blurry footage TODO: fix the folder path)            for (var k =0 ; k< exercisesIntrosBin.children.numItems; k++){                if (exercisesIntrosBin.children[k].name.toString().match(reEx)){                var preClip = exercisesIntrosBin.children[k];                    preClip.setInPoint(0);                    preClip.setOutPoint(preRoll);                    placeClip(activeSeq,0, preClip);                               }            }                        //TITLE: exercise name            for (var k =0 ; k< exercisesTitlesBin.children.numItems; k++){                    if (exercisesTitlesBin.children[k].name.toString().match(reEx)){                        var titleClip = exercisesTitlesBin.children[k];                        titleClip.setOutPoint(preRoll);                                                //heres the complex part, i have to find a way to superimpse the right duration of clips                        var numClips = activeSeq.videoTracks[0].clips.numItems;                        var insertTime = activeSeq.videoTracks[0].clips[numClips - 1].start.seconds;                        activeSeq.videoTracks[1].insertClip(titleClip,insertTime);                                                //~placeClip(activeSeq,1,exercisesTitlesBin.children[k]);                        }                    }                         //TITLE: exercise time            var timeReString = "^" + infoArray[j][1];            var timeReEx = new RegExp(timeReString);                for (var k = 0;  k< timerExercisesBin.children.numItems; k++){                    if (timerExercisesBin.children[k].name.toString().match(timeReEx)){                        var timeClip = timerExercisesBin.children[k];                        timeClip.setOutPoint(preRoll);                                                //heres the complex part, i have to find a way to superimpse the right duration of clips                        var numClips = activeSeq.videoTracks[0].clips.numItems;                        var insertTime = activeSeq.videoTracks[0].clips[numClips - 1].start.seconds;                        activeSeq.videoTracks[2].insertClip(timeClip,insertTime);                        }                    }                                //VIDEO: exercise clip                var inPoint = 0;                var outPoint = Number(infoArray[j][1]);                clip.setInPoint(inPoint);                clip.setOutPoint(outPoint);                placeClip(activeSeq,0,clip);                                                //AUDIO insert beep at the end of exercise                if(j<infoArray.length-1){                var numClips = activeSeq.videoTracks[0].clips.numItems;                var timerInsertTime = activeSeq.videoTracks[0].clips[numClips - 1].end.seconds;                activeSeq.audioTracks[1].insertClip(audioTimerClip,timerInsertTime-3);                }            else{                var numClips = activeSeq.videoTracks[0].clips.numItems;                var timerInsertTime = activeSeq.videoTracks[0].clips[numClips - 1].end.seconds;                                activeSeq.audioTracks[1].insertClip(audioTimerClip,timerInsertTime-4.2);                               }                                //break                if(Number(infoArray[j][2])>0 && j< infoArray.length-1){ //check if the break is set to 0 or if it's the last exercise                    breakClip.setInPoint(0);                    breakClip.setOutPoint(Number(infoArray[j][2])+1);                    placeClip(activeSeq,0,breakClip);                    //break title                    breakTitleClip.setInPoint(0);                    breakTitleClip.setOutPoint(Number(infoArray[j][2])+1);                    var numClips = activeSeq.videoTracks[0].clips.numItems;                     var insertTime = activeSeq.videoTracks[0].clips[numClips - 1].start.seconds;                    activeSeq.videoTracks[3].insertClip(breakTitleClip,insertTime);                                                             //break TIMER                    var breakTimeReString = "^" + infoArray[j][2];                    var breakTimeReEx = new RegExp(breakTimeReString);                                    for (var k = 0;  k< breakTimersBin.children.numItems; k++){                        if (breakTimersBin.children[k].name.toString().match(breakTimeReEx)){                            var breakTimerClip = breakTimersBin.children[k];                            breakTimerClip.setOutPoint(Number(infoArray[j][2])+1); //not necessary                            //use insertTime from before                                                        activeSeq.videoTracks[4].insertClip(breakTimerClip,insertTime);                                                        }                        }                                                            //AUDIO insert beep at the end of break                    var numClips = activeSeq.videoTracks[3].clips.numItems;                    var insertTime = activeSeq.videoTracks[3].clips[numClips - 1].end.seconds - 4;                    activeSeq.audioTracks[1].insertClip(audioTimerClip,insertTime);                                                                                                   }                                                        //~             proj.activeSequence.videoTracks[0].insertClip(exercisesBin.children[i], Number(infoArray[j][1]));    //~             stringa_debug  = stringa_debug + " - " + j + "  "  + export_low_bin.children[i].name + " " + infoArray[j][1] + "second";        }    }    }           //now the hard part to insert the clip right above the preroll           // first set the length straight           //~ app.enableQE();//~ var clip = qe.project.getActiveSequence().getVideoTrackAt(0).getItemAt(0);//~ clip.addVideoEffect(qe.project.getVideoEffectByName("Gaussian Blur"));//~ var clip = app.project.activeSequence.videoTracks[0].clips[0];//~ for (var a = 0;a<clip.components.numItems;a++){//~     alert(clip.components.displayName, clip.name);//~     if( clip.components.displayName == "Crop"){//~         clip.components.properties[0].setValue(30,1);//~         clip.components.properties[1].setValue(20,1);//~         clip.components.properties[2].setValue(12,1);//~         clip.components.properties[3].setValue(10,1);//~         clip.components.properties[5].setValue(25,1);//~         }//~     }//~ alert(stringa_debug);//~ alert(seqClipsArray);//~ app.project.rootItem.createBin("Original Clips"); // CREATE BIN FOR ORGANIZATION//~ var importBin = findBinIndex(app.project.rootItem,"Original Clips"); // STORE THE INDEX PATH TO THAT BIN//~ // IMPORTARY TO LOAD FILES. THIS IS WHERE YOU ADJUST FILEPATHS IF YOU NEED TO //~ var importAry = [];//~ // LOOP THROUGH INFOARRAY//~ if (infoArray){//~     for (var i = 1; i < infoArray.length; i++) { // START WITH i AS 1 BECAUSE THE FIRST LINE OF OUR CSV IS HEADERS//~         importAry[0] = infoArray[i][3]; // SET importAry ITEM TO THE FILEPATH. fORMAT CORRECTLY HERE//~         //~         app.project.importFiles(importAry,1,importBin,0);   // IMPORT ONE MOVIE AT A TIME INTO THE NEW BIN, SO WE CAN RENAME IT ACCORDINGLY AS IT COMES IN//~         importCount++;//~         //~                for (var a = 0; a < importBin.children.numItems; a++){ // LOOP THROUGH THE IMPORT BIN//~                     if( importBin.children[a].name.indexOf(" - ")==-1){//~                         importBin.children[a].name = " "+ importCount + " - " + importBin.children[a].name; // RENAME WITH A THE NUMBER IT WAS IMPORTED, THIS HOLDS THE ORDER OF THE CSV//~                         infoArray[i][infoArray[i].length] = importBin.children[a].nodeId; // STORE THE ITEMS NODEID IN THE CSV ARRAY//~                     }    //~         }   //~     }//~ }/* ================================================= END VIDEO 1 ===============================================================*///~ app.project.rootItem.createBin("Subclips"); // CREATE BIN FR OUR SUBCLIPS//~ var moveTo = findBinIndex(app.project.rootItem,"Subclips");//~ for(a=0;a<app.project.sequences.numSequences;a++){ // LOOP THROUGH ALL SEQS    //~     if(app.project.sequences[a].name=="Auto Seq"){ // FIND OUR CREATED SEQUENCE//~     app.project.activeSequence = app.project.sequences[a]; // SET THE SEQUENCE TO BE OUR ACTIVE SEQ//~     }//~ }//~ // LOOP THROUGH OUR IMPORTED CLIPS TO CREATE THE EDITED SUBCLIPS. //~ var numItems = importBin.children.numItems;//~ for(a=0;a<numItems;a++){//~     var currentItem = importBin.children[a];//~     for (var i = 1; i < infoArray.length; i++) { // LOOP THROUGH INFO ARRAY//~         //~         if(currentItem.type == 1 && currentItem.nodeId == infoArray[ i ][ infoArray[i].length-1 ]){ // CHECK THAT ITEM IS A CLIP, AND THAT THE NODEID'S MATCH WITH OUR CSV LINE.//~             var inPoint = timecodeToSeconds(infoArray[i][1]); // GATHER TIMECODE INFORMATION INTO A FLAT SECONDS NUMBER//~             var outPoint = timecodeToSeconds(infoArray[i][2]);//~             //~             var newSub = currentItem.createSubClip(infoArray[i][0] , inPoint , outPoint , 0 , 1 , 1 ); // CREATE THE SUBCLIPS ( NAME , IN , OUT , BOUNDARIES (BINARY) , TAKE VIDEO , TAKE AUDIO)//~             newSub.moveBin(moveTo); // MOVE INTO THE SUBCLIPS BIN//~             //~              var activeSeq = app.project.activeSequence;//~              placeClip(activeSeq, newSub , bufferTime);//~             //subCounter++;//~         }//~     }//~ }//~ /* ================================================= WOOHOO WERE DONE! ===============================================================*/// FUNCTION LIST function findBinIndex(currentItem, nameToFind){       if(nameToFind){    for (var j = 0; j < currentItem.children.numItems; j++){          var currentChild = currentItem.children[j];                              if (currentChild.type == ProjectItemType.BIN && currentChild.name.toUpperCase() == nameToFind.toUpperCase() ){                        globalBind = currentChild;                        return currentChild;                    }                             if (currentChild.type == ProjectItemType.BIN){                          findBinIndex(currentChild, nameToFind);                      }           }          } else {        alert("No bin was targeted");       }   }function timecodeToSeconds(arrayObject){    var timeCodeArray = [];    timeCodeArray = arrayObject.split(":");    var timeCode = (Number(timeCodeArray[0])*60) + Number((timeCodeArray[1]));    return timeCode;       }function placeClip(activeSeq , track, subClip){    subClip.setScaleToFrameSize();// SET SCALE TO FRAME SIZE                             if(activeSeq.videoTracks[track].clips.numItems == 0){ // IF THERE ARE NOT CLIPS IN THE SEQUENCE, PLACE FRIST CLIP AT TIME ZERO                        activeSeq.videoTracks[track].insertClip(subClip,0)                         //clipCounter++;                        } else { // IF THERE ARE CLIPS IN THE SEQUENCE, PLACE AT THE TIMECODE OF END OF THE LAS CLIP + THE BUFFER TIME                        var numClips = activeSeq.videoTracks[track].clips.numItems;                        var insertTime = activeSeq.videoTracks[track].clips[numClips - 1].end.seconds;                        activeSeq.videoTracks[track].insertClip(subClip,insertTime);                        //clipCounter++;                        }                    }   	//--------------------------------------------------------------------------------------------------------------------------------------------------}	    }}